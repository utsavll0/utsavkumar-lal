{"type":"data","nodes":[null,null,{"type":"data","data":[{"features":1,"posts":114,"workex":151},[2,17,33,41,53,69,81,94,103],{"name":3,"description":4,"image":5,"tags":6,"url":14,"type":15},"Animal Movement Tracking App","This app built using Spring Boot and NextJS helps track animal movement across America. The animal data is stored in a PostgresSQL server. The app can be one clicked deployed using docker compose and runs perfectly out of the box.","images/animal_farm.png",[7,9,12],{"label":8},"Java",{"label":10,"color":11},"Typescript","secondary",{"label":13},"Docker","https://github.com/utsavll0/movement-app",[16],"Full Stack",{"name":18,"description":19,"image":20,"tags":21,"url":31,"type":32},"Burnout","Extended the Burnout App, which helps user track calories. Added new graphs using ChartJS for tracking daily calories. Improved existing chat bot. Designed a CI/CD pipeline using Github Actions.","images/burnout.png",[22,24,26,29],{"label":23},"Python",{"label":25,"color":11},"HTML",{"label":27,"color":28},"CSS","primary",{"label":30,"color":11},"JS","https://github.com/utsavll0/calorieApp_server",[16],{"name":34,"description":35,"image":36,"tags":37,"url":39,"type":40},"Redshift Import Plugin - Posthog","Contributed to Posthog analytics app by helping build the Redshift import plugin - A plugin to transfer existing analytics data from redshift to posthog","images/osc.png",[38],{"label":10},"https://github.com/PostHog/posthog-redshift-import-plugin","Others",{"name":42,"description":43,"image":44,"url":45,"tags":46,"type":52},"Spendwise","Extended an already existing telegram bot to add speech to text features in the app. Added features to export and import data to a csv file.","images/banner.jpg","https://github.com/utsavll0/spendwise",[47,48,50],{"label":23},{"label":49,"color":11},"Telegram Bot",{"label":51},"Speech to Text",[16],{"name":54,"description":55,"image":56,"url":57,"tags":58,"type":66},"Reinforcement Learning Car","A project where I explored reinforcement learning using Unity and MLAgents as platform. This was part of my coursework and involved fine tuning a proximal policy optimization model and train a car agent to drive around a track.","images/car.png","https://github.com/utsavll0/Reinforcement-Learning-Car",[59,61,63,64],{"label":60},"C#",{"label":62,"color":11},"Unity 3D",{"label":23,"color":28},{"label":65,"color":11},"PyTorch",[67,68],"Games","ML/AI",{"name":70,"description":71,"image":72,"url":73,"tags":74,"type":80},"Predicting NBA match outcome","A data engineering and data science project to explore joining two different datasets of varying origin. Further on the project explores training Naive Bayes and Nueral Network models to predict outcome of matches","images/basketball.png","https://github.com/utsavll0/NBA-match-predictor/",[75,76,78],{"label":23},{"label":77,"color":11},"Pandas",{"label":79,"color":28},"Sklearn",[68],{"name":82,"description":83,"image":84,"url":85,"tags":86,"type":93},"Boid's Flocking Algorithm","A game project which demonstrates various algorithms that a character in a game can have. The algorithms include arrive at a point, look in the direction of the movement, wander randomly, avoid colliding with other characters. As a final demo, use all these behaviors to simulate flocking behavior called as Boid's algorithm.","images/boid.png","https://github.com/utsavll0/Boid-s-Algorithm",[87,89,91],{"label":88,"color":28},"C++",{"label":90,"color":11},"SFML",{"label":92,"color":28},"Make",[67],{"name":95,"description":96,"image":97,"url":98,"tags":99,"type":102},"E-commerce backend","A backend project to expore ways of implementing REST Apis in Go.","images/ecom.png","https://github.com/utsavll0/ecom",[100],{"label":101,"color":28},"Go",[16],{"name":104,"description":105,"image":106,"url":107,"tags":108,"type":113},"Mario Clone","Designed and developed a clone of the popular game Mario using Godot engine and GD Script programming language","images/mario.png","https://github.com/utsavll0/mario-clone",[109,111],{"label":110,"color":28},"Godot",{"label":112,"color":11},"GDScript",[67],[115,143,147],{"slug":116,"title":117,"date":118,"excerpt":119,"coverImage":120,"tags":121,"html":123,"readingTime":124,"relatedPosts":125},"customization","How to Customize this Template","2023-04-22T21:55:27.154Z","How to customize what you're seeing here and make it your own.","/images/posts/customization.jpg",[122],"Documentation","\u003Cp>In general, content can be modified by editing the \u003Cstrong>organisms\u003C/strong> and the pages themselves. Below is a list of the most common changes that you may want to make.\u003C/p>\n\u003Ch2 id=\"domainsite-url\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#domainsite-url\">\u003Cspan>#\u003C/span>\u003C/a>Domain/site URL\u003C/h2>\n\u003Cp>The first thing you might want to do is replace the domain of of the site with your own. There are two places where you need to do that:\u003C/p>\n\u003Cul>\u003Cli>In the \u003Ccode>package.json\u003C/code> file, check the \u003Ccode>postbuild\u003C/code> script. Change the domain there to your own, so it ends up like this: \u003Ccode>svelte-sitemap --domain https://your-domain.com\u003C/code>. This is used to generate the sitemap of your website, which is used by search engines to index your site.\u003C/li>\n\u003Cli>In the \u003Ccode>src/lib/data/meta.ts\u003C/code> file, change the \u003Ccode>siteBaseUrl\u003C/code> property to your own domain. This is used in multiple parts of the app wherever the site needs to link to itself.\u003C/li>\u003C/ul>\n\u003Ch2 id=\"headersite-logo\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#headersite-logo\">\u003Cspan>#\u003C/span>\u003C/a>Header/site logo\u003C/h2>\n\u003Cp>To replace the logo that appears in the header, modify or replace the contents of the \u003Ccode>Logo.svelte\u003C/code> atom.\u003C/p>\n\u003Cp>The links that appear on the header can be modified directly in the \u003Ccode>Header.svelte\u003C/code> organism.\u003C/p>\n\u003Ch2 id=\"hero-section\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#hero-section\">\u003Cspan>#\u003C/span>\u003C/a>Hero section\u003C/h2>\n\u003Cp>The hero section is the first section of the site’s home page. It is composed of a Heading, the \u003Cem>intro\u003C/em> text, and a list of buttons/CTAs. The contents of this section can be modified directly in the \u003Ccode>Hero.svelte\u003C/code> organism.\u003C/p>\n\u003Ch2 id=\"about-section\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#about-section\">\u003Cspan>#\u003C/span>\u003C/a>About section\u003C/h2>\n\u003Cp>The about section contains another headline, a paragraph of text, some social media links, and optionally an image. The contents of this section can be modified directly in the \u003Ccode>About.svelte\u003C/code> organism.\u003C/p>\n\u003Ch2 id=\"social-links\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#social-links\">\u003Cspan>#\u003C/span>\u003C/a>Social Links\u003C/h2>\n\u003Cp>The social links are contained in the \u003Ccode>Socials.svelte\u003C/code> molecule and can be used in any page. This template shows them on the About section and in the Footer.\u003C/p>\n\u003Ch2 id=\"footer\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#footer\">\u003Cspan>#\u003C/span>\u003C/a>Footer\u003C/h2>\n\u003Cp>The footer contains some credits, a list of social links, and the RSS/Theme toggle. The contents of this section can be modified directly in the \u003Ccode>Footer.svelte\u003C/code> organism.\u003C/p>\n\u003Ch2 id=\"colors\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#colors\">\u003Cspan>#\u003C/span>\u003C/a>Colors\u003C/h2>\n\u003Cp>You can change the color palette of the website just by tweaking the \u003Ccode>_themes.scss\u003C/code> file. The file uses the \u003Ccode>define-color\u003C/code> scss function to automatically set the color variables in Hex, RGB and HSL formats, so you can choose whichever format you need.\u003C/p>\n\u003Cp>The main theme colors (primary and secondary) have two variants: shade and tint. The shade is a lighter version of the color (darker in dark mode), and the tint should almost match the page’s background, so that in light mode, it’s really bright, and in dark mode, it’s really dark.\u003C/p>\n\u003Ch2 id=\"fonts\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#fonts\">\u003Cspan>#\u003C/span>\u003C/a>Fonts\u003C/h2>\n\u003Cp>This template uses the Inter, Merriweather and Ubuntu Mono font families. You can change the font family by editing the \u003Ccode>_variables.scss\u003C/code> file, and the code is already set up to accept a default font, a heading font, and a monospace font.\u003C/p>\n\u003Cp>I recommend using \u003Ca href=\"https://fontsource.org/\" rel=\"nofollow\">Fontsource\u003C/a> to import the fonts you need, or self-hosting them. In case you’re using Fontsource, you can import the fonts in \u003Ccode>global.scss\u003C/code> file to make sure they’re available in the entire site.\u003C/p>\n\u003Ch2 id=\"favicon\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#favicon\">\u003Cspan>#\u003C/span>\u003C/a>Favicon\u003C/h2>\n\u003Cp>Favicons are located in the \u003Ccode>static/favicons\u003C/code> folder. I like to use \u003Ca href=\"https://realfavicongenerator.net\" rel=\"nofollow\">Real Favicon Generator\u003C/a> to generate mine, but you can use any other tool you like. I wrote \u003Ca href=\"https://fantinel.dev/fixing-favicons\" rel=\"nofollow\">a blog post about Favicons\u003C/a> in case you want to learn more about them.\u003C/p>\n\u003Ch2 id=\"social-media-link-preview\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#social-media-link-preview\">\u003Cspan>#\u003C/span>\u003C/a>Social Media Link Preview\u003C/h2>\n\u003Cp>You probably want to customize how links to your website look when posted on social media/messaging apps. To do that, you can edit the info in \u003Ccode>src/lib/data/meta.ts\u003C/code>. There, you can edit the site’s title, description, tags (used by search engines) and the image that appears when sharing a link.\u003C/p>","3 min read",[126,134],{"title":127,"slug":128,"coverImage":129,"date":130,"excerpt":131,"tags":132,"html":133,"readingTime":124},"How Blog Posts Work","blog-posts","/images/posts/blog-posts.jpg","2023-04-22T21:55:15.361Z","How to manage existing blog posts and create new ones",[122],"\u003Cp>All blog posts are located inside the \u003Ccode>src/routes/(blog-article)\u003C/code> folder. Each folder inside it represents a blog post, and each folder has a \u003Ccode>+page.md\u003C/code> file, which is the file that contains the post’s content.\u003C/p>\n\u003Cp>This way, the URL for each blog post is generated with the folder’s name. For example, the folder \u003Ccode>src/routes/(blog-article)/how-blog-posts-work\u003C/code> will generate the URL \u003Ccode>https://mysite.com/how-blog-posts-work\u003C/code>.\u003C/p>\n\u003Cp>All posts are Markdown files, which means you can use the \u003Ca href=\"https://www.markdownguide.org/basic-syntax\" rel=\"nofollow\">Markdown syntax\u003C/a> in them, and it will work out of the box. However, since this projects uses \u003Ca href=\"https://mdsvex.pngwn.io/\" rel=\"nofollow\">MDsveX\u003C/a> to parse Markdown, you can also use Svelte components inside them! This means that the components used in other pages can also be used in blog posts.\u003C/p>\n\u003Cdiv class=\"callout-block info svelte-sxx0n0\">\u003Cdiv class=\"icon-wrapper svelte-sxx0n0\">\u003Csvg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\u003Cpath d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003C/path>\u003Cpath d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003C/path>\u003Cpath d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003C/path>\u003C/svg>\u003C/div>\n\tThis is a Svelte component inside a Markdown file!\n\n\u003C/div>\n\u003Ch2 id=\"processing\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#processing\">\u003Cspan>#\u003C/span>\u003C/a>Processing\u003C/h2>\n\u003Cp>Besides the blog post page itself, the blog posts can be displayed in other places, such as the \u003Ccode>/blog\u003C/code> page, which lists all blog posts, and the \u003Ccode>&lt;RecentPosts&gt;\u003C/code> component, used in the home page.\u003C/p>\n\u003Cp>To be able to do that, posts are processed in the \u003Ccode>src/lib/data/blog-posts/index.ts\u003C/code> file. That file imports the blog post files and processes them, so we’re able to use some of the post’s metadata to list them. For example, we get the post’s title, cover image, and calculate the reading time based on its content, so that information is displayed in the blog post cards in the \u003Ccode>/blog\u003C/code> page.\u003C/p>\n\u003Cp>There is also some basic logic to get related posts based on a post’s tags. The logic should be straightforward enough to modify it to your needs.\u003C/p>\n\u003Ch2 id=\"creating-a-new-post\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#creating-a-new-post\">\u003Cspan>#\u003C/span>\u003C/a>Creating a new post\u003C/h2>\n\u003Cp>To create a new post, create a new folder inside the \u003Ccode>src/routes/(blog-article)\u003C/code> folder, and inside it, create a \u003Ccode>+page.md\u003C/code> file. The folder name will be used as the post’s URL slug, so make sure it’s a valid URL slug.\u003C/p>\n\u003Cp>Inside the \u003Ccode>+page.md\u003C/code> file, you must start with the front matter, which is a YAML-like syntax that is used to define metadata for the post. The front matter must be the first thing in the file, and must be separated from the rest of the content by three dashes (\u003Ccode>---\u003C/code>). An example of a front matter is:\u003C/p>\n\u003Cdiv class=\"code-block svelte-1pkpsrg\">\n\t\u003Cdiv class=\"lang svelte-1pkpsrg\">markdown\u003C/div>\n\t\u003Cpre class=\"language-md\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-md\">\u003Cspan class=\"token front-matter-block\">\u003Cspan class=\"token punctuation\">---\u003C/span>\n\u003Cspan class=\"token front-matter yaml language-yaml\">slug: my-new-blog-post\ntitle: My New Blog Post\ndate: 2023-04-22T20:45:25.350Z\nexcerpt: A short description of the post\ncoverImage: /images/posts/cover-image.jpg\ntags:\n  - Example\u003C/span>\n\u003Cspan class=\"token punctuation\">---\u003C/span>\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003C/div>\n\u003Ch2 id=\"managing-blog-posts\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#managing-blog-posts\">\u003Cspan>#\u003C/span>\u003C/a>Managing blog posts\u003C/h2>\n\u003Cp>I highly recommend the \u003Ca href=\"https://frontmatter.codes/\" rel=\"nofollow\">Front Matter VS Code extension\u003C/a> to manage blog posts. It gives you a nice CMS-like UI to manage the front matter of all blog posts, as well as a preview of their content. It is, of course, optional, and you can manage everything directly in the Markdown files if you prefer.\u003C/p>\n\u003Cimg srcset=\"/images/posts/frontmatter-preview-dashboard.avif, /images/posts/frontmatter-preview-dashboard.webp, /images/posts/frontmatter-preview-dashboard.png\" src=\"/images/posts/frontmatter-preview-dashboard.png\" alt=\"Screenshot of the Front Matter VS Code extension, showing the dashboard with all posts\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1ykl0dj full-bleed\">\n\u003Cimg srcset=\"/images/posts/frontmatter-preview-edit.avif, /images/posts/frontmatter-preview-edit.webp, /images/posts/frontmatter-preview-edit.png\" src=\"/images/posts/frontmatter-preview-edit.png\" alt=\"Screenshot of the Front Matter VS Code extension, showing the post editing UI\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1ykl0dj full-bleed\">\n\u003Ch2 id=\"rss\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#rss\">\u003Cspan>#\u003C/span>\u003C/a>RSS\u003C/h2>\n\u003Cp>This template automatically generates a RSS feed of your blog posts. It is generated in the \u003Ccode>src/routes/rss.xml/+server.ts\u003C/code> file, and it is available at the \u003Ccode>/rss.xml\u003C/code> URL.\u003C/p>",{"slug":135,"title":136,"date":137,"excerpt":138,"coverImage":139,"tags":140,"html":141,"readingTime":142},"project-structure","Project Structure","2023-04-22T21:55:21.800Z","How code and structure are organized.","/images/posts/project-structure.jpg",[122],"\u003Cp>This project follows the basic \u003Ca href=\"https://kit.svelte.dev/docs/project-structure\" rel=\"nofollow\">SvelteKit structure\u003C/a>, with some added conventions to make customization a post-management easier.\u003C/p>\n\u003Ch2 id=\"components\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#components\">\u003Cspan>#\u003C/span>\u003C/a>Components\u003C/h2>\n\u003Cp>The components are organized following the \u003Ca href=\"https://medium.com/@WeAreMobile1st/atomic-design-getting-started-916bc81bad0e\" rel=\"nofollow\">Atomic Design\u003C/a> principles, albeit somewhat simplified. Components are in the \u003Ccode>src/lib/components\u003C/code> folder, and are organized in the following way:\u003C/p>\n\u003Ch3 id=\"atoms\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#atoms\">\u003Cspan>#\u003C/span>\u003C/a>Atoms\u003C/h3>\n\u003Cp>Atoms are the most basic components, which can be seen as building blocks for other components. They’re small and self-contained, and do only one thing. Examples of atoms are buttons, inputs, and tags.\u003C/p>\n\u003Ch3 id=\"molecules\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#molecules\">\u003Cspan>#\u003C/span>\u003C/a>Molecules\u003C/h3>\n\u003Cp>Molecules are groups of atoms that work together to form a more complex component. Examples of molecules are cards, groups of links, or an alert callout.\u003C/p>\n\u003Ch3 id=\"organisms\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#organisms\">\u003Cspan>#\u003C/span>\u003C/a>Organisms\u003C/h3>\n\u003Cp>Organisms, in this project, are code blocks that represent a section of a page, such as the header, footer and hero section. They can be used directly in a page as a sort of building block, so the page’s code can be as simple as this:\u003C/p>\n\u003Cdiv class=\"code-block svelte-1pkpsrg\">\u003Cdiv class=\"filename svelte-1pkpsrg\">+page.svelte\u003C/div>\n\t\u003Cdiv class=\"lang svelte-1pkpsrg\">html\u003C/div>\n\t\u003Cpre class=\"language-html\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-html\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&lt;\u003C/span>Header\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&lt;\u003C/span>Hero\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&lt;\u003C/span>About\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&lt;\u003C/span>Footer\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003C/div>\n\u003Ch2 id=\"component-gallery\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#component-gallery\">\u003Cspan>#\u003C/span>\u003C/a>Component Gallery\u003C/h2>\n\u003Cp>This project uses \u003Ca href=\"https://histoire.dev\" rel=\"nofollow\">Histoire\u003C/a> to be able to see and develop components in isolation. To open it, run \u003Ccode>npm run story:dev\u003C/code>. This way you can customize and build new components with placeholder content and without worrying about where to put them in a page.\u003C/p>\n\u003Ch2 id=\"pages\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#pages\">\u003Cspan>#\u003C/span>\u003C/a>Pages\u003C/h2>\n\u003Cp>Pages obey the default SvelteKit structure, but can be summarized as follows:\u003C/p>\n\u003Cul>\u003Cli>There are two different file types: the pages (\u003Ccode>+page.svelte\u003C/code>) and the layouts (\u003Ccode>+layout.svelte\u003C/code>). Layouts are a way to reuse the same structure between different pages without having to duplicate code;\u003C/li>\n\u003Cli>There are two different page layouts in this site: the “Waves” layout, which all pages inside the \u003Ccode>(waves)\u003C/code> folder use, and the “Blog Article” layout, which all pages inside the \u003Ccode>(blog-article)\u003C/code> folder use;\u003C/li>\u003C/ul>\n\u003Ch2 id=\"blog-posts\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#blog-posts\">\u003Cspan>#\u003C/span>\u003C/a>Blog Posts\u003C/h2>\n\u003Cp>To know how blog posts work and how to create new ones, check out \u003Ca href=\"/blog-posts\">How Blog Posts Work\u003C/a>.\u003C/p>","2 min read",{"slug":135,"title":136,"date":137,"excerpt":138,"coverImage":139,"tags":140,"html":141,"readingTime":142,"relatedPosts":144},[145,146],{"title":127,"slug":128,"coverImage":129,"date":130,"excerpt":131,"tags":132,"html":133,"readingTime":124},{"slug":116,"title":117,"date":118,"excerpt":119,"coverImage":120,"tags":121,"html":123,"readingTime":124},{"title":127,"slug":128,"coverImage":129,"date":130,"excerpt":131,"tags":132,"html":133,"readingTime":124,"relatedPosts":148},[149,150],{"slug":116,"title":117,"date":118,"excerpt":119,"coverImage":120,"tags":121,"html":123,"readingTime":124},{"slug":135,"title":136,"date":137,"excerpt":138,"coverImage":139,"tags":140,"html":141,"readingTime":142},[152,177,195,216,234],{"company":153,"designation":154,"description":155,"startDate":156,"tags":157,"current":176},"XLOC, Raleigh, NC","Programming Intern","As a programming intern, I am helping build the next version of XLOC which is a CMS application used by studios like Bethesda and Activision. I am also utilizing my skills in AWS cloud to streamline deployment methods and improving existing infrastructure.",["Date","2024-06-24T00:00:00.000Z"],[158,160,162,164,166,168,170,172,174],{"label":159,"color":28},"AWS",{"label":161,"color":11},"CloudFormation",{"label":163,"color":28},"ASP.NET",{"label":165,"color":11},"VB",{"label":167,"color":28},"SQL Server",{"label":169,"color":11},"CodeDeploy",{"label":171,"color":11},"EC2",{"label":173,"color":11},"S3",{"label":175,"color":11},"Elastic LoadBalancers",true,{"company":178,"designation":179,"description":180,"startDate":181,"endDate":182,"tags":183,"current":194},"NC State Nuclear Engineering Department, Raleigh, NC","Graduate Student Researcher","As a software developer on the OpenPRA app, I developed the admin and user profile pages, and implemented features for creating and managing new users and invites to the application. I also began integrating role-based access control into both the frontend and backend services.",["Date","2023-12-07T00:00:00.000Z"],["Date","2024-05-31T00:00:00.000Z"],[184,186,188,190,192],{"label":185,"color":28},"React",{"label":187,"color":11},"Elastic UI",{"label":189,"color":28},"NestJS",{"label":191,"color":11},"Node",{"label":193,"color":28},"MongoDB",false,{"company":196,"designation":197,"description":198,"startDate":199,"endDate":200,"tags":201,"current":194},"Makkajai, Remote, India","Software Development Engineer - 1","At Makkajai, I worked as a general software engineer. As part of a small team, I was responsible for managing 8 mobile apps for iOS and Android. My daily tasks included ensuring our games were bug-free and maintaining the stability of our backend services. I also led several infrastructure improvement projects, such as deploying a new analytics server and upgrading deprecated services to the latest versions. As my responsibilities expanded, I occasionally managed and led projects to completion.",["Date","2021-04-26T00:00:00.000Z"],["Date","2023-07-31T00:00:00.000Z"],[202,204,206,208,210,212,213,215],{"label":203,"color":28},"Cocos2D-X",{"label":205,"color":11},"Unity2D",{"label":207,"color":28},"Spring Boot",{"label":209,"color":11},"AWS Elastic Beanstalk",{"label":211,"color":28},"Redshift",{"label":185,"color":11},{"label":214,"color":28},"Flutter",{"label":214,"color":11},{"company":217,"designation":218,"description":219,"startDate":220,"endDate":221,"tags":222,"current":194},"Brainscale, Pune (Remote), India","Junior Cloud Engineer","At Brainscale, as a full stack cloud developer specializing in Microsoft Azure, I worked on various projects, with my proudest achievement being the development of a test automation framework for a multi-million dollar project using Python Behave. Additionally, I built a chatbot for querying Azure Billing Costs on Microsoft Teams and created an internal portal to analyze employee workload analytics using Power BI. During my time at Brainscale, I also became 2x Azure cloud certified and developed additional skills in customer service and customer support.",["Date","2019-11-08T00:00:00.000Z"],["Date","2021-04-24T00:00:00.000Z"],[223,224,226,228,230,232],{"label":163,"color":28},{"label":225,"color":11},"Python Behave",{"label":227,"color":28},"Selenium",{"label":229,"color":11},"Azure",{"label":231,"color":28},"Mirosoft Bot Framework",{"label":233,"color":11},"Angular",{"company":235,"designation":236,"description":237,"startDate":238,"endDate":239,"tags":240,"current":194},"Tech Mahindra Ltd, Pune, India","Associate Software Engineer","My initial company where I gained foundational skills in software engineering. I completed training in Java, HTML, CSS, JavaScript, SQL, and more. Additionally, I became familiar with Agile development practices and participated in Scrum meetings.",["Date","2019-07-31T00:00:00.000Z"],["Date","2019-11-07T00:00:00.000Z"],[241,242,244,246,247,248,250,252],{"label":8,"color":28},{"label":243,"color":11},"Oracle SQL",{"label":245,"color":28},"Spring",{"label":25,"color":11},{"label":27,"color":28},{"label":249,"color":11},"Javascript",{"label":251,"color":28},"Agile",{"label":253,"color":11},"Scrum"],"uses":{}}]}
